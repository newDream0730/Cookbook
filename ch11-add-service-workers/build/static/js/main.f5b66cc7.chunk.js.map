{"version":3,"sources":["logo.svg","Page2.js","App.js","reportWebVitals.js","registerWorker.js","index.js"],"names":["Page2","className","to","App","path","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","registerWorker","pathToWorker","onInstall","onUpdate","onError","navigator","URL","process","window","location","href","origin","addEventListener","a","serviceWorker","register","registration","onupdatefound","worker","installing","onstatechange","state","controller","reg","console","info","err","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAAe,G,MAAA,IAA0B,kC,qBCa1BA,EAXD,WACV,OAAO,sBAAKC,UAAU,QAAf,UACH,wCACA,mDAIA,cAAC,IAAD,CAAMC,GAAG,IAAT,wB,MCiBOC,MArBf,WACE,OACE,qBAAKF,UAAU,MAAf,SACI,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOG,KAAK,SAAZ,SACI,cAAC,EAAD,MAEJ,yBAAQH,UAAU,aAAlB,UACI,qBAAKI,IAAKC,EAAML,UAAU,WAAWM,IAAI,SACzC,sCACS,8CADT,0BAGA,cAAC,IAAD,CAAML,GAAG,SAAT,qCCNLM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,yBCyCCQ,EARQ,YAxCN,SAACC,EAAcC,EAAWC,EAAUC,GACjD,GAA6C,kBAAmBC,UAAW,CAEvE,GADkB,IAAIC,IAAIC,GAAwBC,OAAOC,SAASC,MACpDC,SAAWH,OAAOC,SAASE,OACrC,OAGJH,OAAOI,iBAAiB,OAAxB,sBAAgC,4BAAAC,EAAA,+EAEGR,UAAUS,cAAcC,SAC/CR,GAAyBN,GAHL,QAElBe,EAFkB,QAMXC,cAAgB,WACzB,IAAMC,EAASF,EAAaG,WACxBD,IACAA,EAAOE,cAAgB,WACE,cAAjBF,EAAOG,QACHhB,UAAUS,cAAcQ,WACpBnB,GACAA,EAASa,GAGTd,GACAA,EAAUc,OAjBV,gDAyBpBZ,GACAA,EAAQ,EAAD,IA1Ba,2DAkCpCW,CAAS,sBACL,SAAAQ,GAAG,OAAIC,QAAQC,KAAK,2BAA4BF,MAChD,SAAAA,GAAG,OAAIC,QAAQC,KAAK,yBAA0BF,MAC9C,SAAAG,GAAG,OAAIF,QAAQG,MAAM,wBAAyBD,OCrCtDE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BzC,IAEAS,M","file":"static/js/main.f5b66cc7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Link} from \"react-router-dom\";\n\nconst Page2 = () => {\n    return <div className='Page2'>\n        <h1>Page 2</h1>\n        <p>\n            Welcome to page 2!\n        </p>\n\n        <Link to='/'>Return</Link>\n    </div>\n}\n\nexport default Page2;","import logo from './logo.svg';\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport Page2 from './Page2';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <BrowserRouter>\n            <Switch>\n                <Route path='/page2'>\n                    <Page2/>\n                </Route>\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <p>\n                        Edit <code>src/App.js</code> and save to reload.\n                    </p>\n                    <Link to='/page2'>Go to page 2</Link>\n                </header>\n            </Switch>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const register = (pathToWorker, onInstall, onUpdate, onError) => {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            return;\n        }\n\n        window.addEventListener('load', async () => {\n            try {\n                const registration = await navigator.serviceWorker.register(\n                    process.env.PUBLIC_URL + pathToWorker\n                );\n\n                registration.onupdatefound = () => {\n                    const worker = registration.installing;\n                    if (worker) {\n                        worker.onstatechange = () => {\n                            if (worker.state === 'installed') {\n                                if (navigator.serviceWorker.controller) {\n                                    if (onUpdate) {\n                                        onUpdate(registration);\n                                    }\n                                } else {\n                                    if (onInstall) {\n                                        onInstall(registration);\n                                    }\n                                }\n                            }\n                        };\n                    }\n                };\n            } catch (err) {\n                if (onError) {\n                    onError(err);\n                }\n            }\n        });\n    }\n}\n\nconst registerWorker = () => {\n    register('/service-worker.js',\n        reg => console.info('Service worker installed', reg),\n        reg => console.info('Service worker updated', reg),\n        err => console.error('Service worker failed', err),\n    );\n}\n\nexport default registerWorker;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport registerWorker from \"./registerWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nregisterWorker();"],"sourceRoot":""}